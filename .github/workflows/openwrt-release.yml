name: Build OpenWrt Package

on:
  push:
    branches:
      # - main
      - 'gh-pages'
  # workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build for ${{ matrix.version }} / ${{ matrix.target }}
    runs-on: ubuntu-latest
    env:
      REPO_APK_KEY: ${{ secrets.REPO_APK_KEY }}
      REPO_OPKG_KEY: ${{ secrets.REPO_OPKG_KEY }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - version: openwrt-24.10
            target: x86_64
          # - version: openwrt-24.10
          #   target: aarch64_cortex-a53
          # - version: openwrt-24.10
          #   target: aarch64_generic
          # - version: openwrt-24.10
          #   target: arm_cortex-a7
          # - version: openwrt-24.10
          #   target: arm_cortex-a9
          # - version: openwrt-24.10
          #   target: mips_24kc
          # - version: openwrt-24.10
          #   target: mipsel_24kc
          - version: snapshots
            target: x86_64
          # - version: snapshots
          #   target: aarch64_cortex-a53
          # - version: snapshots
          #   target: aarch64_generic
          # - version: snapshots
          #   target: arm_cortex-a7
          # - version: snapshots
          #   target: arm_cortex-a9
          # - version: snapshots
          #   target: mips_24kc
          # - version: snapshots
          #   target: mipsel_24kc

    steps:
      - name: üßæ Checkout repo
        uses: actions/checkout@v5
        with:
          ref: main
          # path: feed
          fetch-depth: 0
          submodules: true
          token: ${{ secrets.TOKEN }}

      - name: Get PKG_NAMES and set up feed structure
        run: |
          set -x
          folders=
          for folder in luci*; do
            folders="${folders:+$folders }${folder}"
          done
          echo PKG_NAMES="$folders" >> "$GITHUB_ENV"

          # Also add a shim so ../../luci.mk from package/feeds/systemcrash/<pkg> works:
          mkdir -p package
          printf 'include $(TOPDIR)/feeds/luci/luci.mk\n' > package/luci.mk

          # LuCI-style layout so ../../luci.mk resolves from applications/<pkg>
          for pkg in $folders; do
            mkdir -p feed/luci/applications/${pkg}
          done

          # Add shim luci/luci.mk pointing to the official LuCI feed
          mkdir -p feed/luci
          printf 'include $(TOPDIR)/feeds/luci/luci.mk\n' > feed/luci/luci.mk


          # - name: üß∞ Set up systemcrash feed structure
          #   run: |
          for pkg in ${folders}; do
            # Create a proper OpenWrt feed layout where each package lives in its own subdir
            mkdir -p feed/${pkg}
            # Copy the package sources into the feed subdir (exclude CI and feed itself)
            rsync -av \
              --exclude='.git' \
              --exclude='feed' \
              --exclude='.github' \
              ./ feed/luci/applications/
          done

      - name: Determine ARCH
        run: |
          if [ "${{ matrix.version }}" = "snapshots" ]; then
            echo "ARCH=${{ matrix.target }}-SNAPSHOT" >> "$GITHUB_ENV"
          else
            echo "ARCH=${{ matrix.target }}-${{ matrix.version }}" >> "$GITHUB_ENV"
          fi

      - name: üèóÔ∏è Build with OpenWrt SDK
        uses: openwrt/gh-action-sdk@v8
        env:
          ARCH: ${{ env.ARCH }}
          FEEDNAME: systemcrash
          PACKAGES: ${{ env.PKG_NAMES }}
          INDEX: 1
          FEED_DIR: ${{ github.workspace }}/feed
          NO_SHFMT_CHECK: 1
          NO_REFRESH_CHECK: 1
          # Snapshot apk sign key
          PRIVATE_KEY: ${{ secrets.REPO_APK_KEY }}
          # 24.10 opkg sign key
          KEY_BUILD: ${{ secrets.REPO_OPKG_KEY }}
          # add no default feeds only if our packages have no deps therein
          # NO_DEFAULT_FEEDS: 1

      # - name: üîç Debug build output
      #   run: |
      #     echo "=== Build directory structure ==="
      #     find . -name "*.ipk" -type f 2>/dev/null || echo "No .ipk files found"
      #     echo "=== bin directory structure ==="
      #     ls -la bin/ 2>/dev/null || echo "No bin directory found"
      #     if [ -d "bin/packages" ]; then
      #       echo "=== packages directory structure ==="
      #       find bin/packages/ -type f -name "*.ipk" 2>/dev/null || echo "No .ipk files in packages directory"
      #       echo "=== Full packages directory tree ==="
      #       ls -laR bin/packages/ 2>/dev/null || echo "No packages directory"
      #     fi

      - name: Move package output to repo structure
        run: mv bin ${{ matrix.version }}

      - name: üì¶ Upload artifact for ${{ matrix.target }}
        uses: actions/upload-artifact@v4
        with:
          # If a wildcard pattern is used, the path hierarchy will be preserved after the first wildcard pattern:
          # path/to/*/directory/foo?.txt =>
          #     ‚àü path/to/some/directory/foo1.txt
          #     ‚àü path/to/some/directory/foo2.txt
          #     ‚àü path/to/other/directory/foo1.txt

          # would be flattened and uploaded as =>
          #     ‚àü some/directory/foo1.txt
          #     ‚àü some/directory/foo2.txt
          #     ‚àü other/directory/foo1.txt
          name: ${{ matrix.target }}-${{ matrix.version }}
          path: |
            */packages/${{ matrix.target }}/systemcrash/*.ipk
            */packages/${{ matrix.target }}/systemcrash/*.apk
            */packages/${{ matrix.target }}/systemcrash/Packages*
            */packages/${{ matrix.target }}/systemcrash/index.json
            */packages/${{ matrix.target }}/systemcrash/packages.adb
            */packages/${{ matrix.target }}/systemcrash/packages.adb.asc
          if-no-files-found: ignore

  release:
    name: Release ${{ github.repository }}
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v5
        with:
          ref: 'gh-pages'
          # lfs: true
          submodules: true

      - name: ‚¨áÔ∏è Download all build artifacts
        uses: actions/download-artifact@v6
        with:
          merge-multiple: true
          path: ./

      - name: Display structure of downloaded files
        run: ls -R

      - name: Display current path
        run: pwd

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems

      - name: prenodes
        run: ./prenodes.sh

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v4

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
